//
//  RecordViewController.swift
//  PitchPerfect
//
//  Created by prongbang on 8/4/2562 BE.
//  Copyright (c) 2562 prongbang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import AVFoundation

protocol RecordDisplayLogic: class
{
    func displaySomething(viewModel: Record.Something.ViewModel)
}

class RecordViewController: UIViewController, RecordDisplayLogic, AVAudioRecorderDelegate
{
    var interactor: RecordBusinessLogic?
    var router: (NSObjectProtocol & RecordRoutingLogic & RecordDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RecordInteractor()
        let presenter = RecordPresenter()
        let router = RecordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        
        stopRecordButton.isEnabled = false
    }
    
    // MARK: Do something
    
    @IBOutlet weak var recordingLabel: UILabel!
    @IBOutlet weak var recordButton: UIButton!
    @IBOutlet weak var stopRecordButton: UIButton!
    
    var audioRecorder: AVAudioRecorder!
    
    @IBAction func recordAudio(_ sender: Any) {
        
        recordingLabel.text = "Recording in Progress"
        stopRecordButton.isEnabled = true
        recordButton.isEnabled = false
        
        let dirPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,.userDomainMask, true)[0] as String
        let recordingName = "recordedVoice.wav"
        let pathArray = [dirPath, recordingName]
        let filePath = URL(string: pathArray.joined(separator: "/"))
        
        let session = AVAudioSession.sharedInstance()

        try! session.setCategory(.playAndRecord, mode: .default, options: [])

        try! audioRecorder = AVAudioRecorder(url: filePath!, settings: [:])
        audioRecorder.delegate = self
        audioRecorder.isMeteringEnabled = true
        audioRecorder.prepareToRecord()
        audioRecorder.record()
    }
    
    @IBAction func stopRecording(_ sender: Any) {
        
        recordingLabel.text = "Tab to Record"
        stopRecordButton.isEnabled = false
        recordButton.isEnabled = true
        
        audioRecorder.stop()
        let audioSession = AVAudioSession.sharedInstance()
        try! audioSession.setActive(false)
    
    }
    
    func doSomething()
    {
        let request = Record.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Record.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func audioRecorderDidFinishRecording(_ recorder: AVAudioRecorder, successfully flag: Bool) {
        
        if flag {
            interactor?.currentAudioURL(audioUrl: audioRecorder.url)
            router?.routeToPlay(segue: nil)
        } else {
            print("recording was not successful")
        }
    }
}
